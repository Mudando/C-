#include <iostream>
#include <vector>
#include <stdlib.h>
#include <time.h>
using namespace std;

// parâmetros do algoritmo genético
int tam_genes = 200; // quantidade de genes
int tam_pop = 50; // quantidade de indivíduos da população
int tam_torneio = 20; // tamanho do torneio
int geracoes = 1000; // quantidade de gerações
double prob_mut = 0.2; // probabilidade de mutação
double prob_cruz = 0.7; // probabilidade de cruzamento

// população
vector<vector<int> > populacao;

//protótipos
void inicializaPopulacao();
void mostrarPopulacao();
int obterPontuacao(vector<int> individuo);
void mutacao(vector<int>& individuo);
void cruzamento(int indice_pai1, int indice_pai2, vector<int>& filho);
int obterMelhor();

int main(int argc, char *argv[])
{
    srand(time(NULL));

    inicializaPopulacao();
    mostrarPopulacao();

    for(int i = 0; i < geracoes; i++)//quantidade máxima de gerações
    {
        for(int j = 0; j < tam_torneio; j++)//quantidade de torneios
        {

            // calcula a probabilidade de cruzamento
            double prob = ((double) rand() / ((double)RAND_MAX + 1));

            if(prob < prob_cruz)
            {
                // adiciona os pais, só atribui o valor inicialmente ao pai1 com o intuito de não repetir o mesmo pai
                int indice_pai1 = rand() % tam_pop;
                int indice_pai2;

                do
                {
                    indice_pai2 = rand() % tam_pop;//gera o pai2
                }
                while(indice_pai1 == indice_pai2);

                vector<int> filho;

                // aplica o cruzamento de 1 ponto
                cruzamento(indice_pai1, indice_pai2, filho);

                // calcula a probabilidade de mutação
                prob = ((double) rand() / ((double)RAND_MAX + 1));
                if(prob < prob_mut)
                    mutacao(filho);

                //verifica qual a pontuaçã dos pais e do filho
                int scorePai1 = obterPontuacao(populacao[indice_pai1]);
                int scorePai2 = obterPontuacao(populacao[indice_pai2]);
                int scoreFilho = obterPontuacao(filho);


                //se a pontuação do filho é melhor que a pontuação dos pais, caso seja ele irá subistituir o pai
                if(scoreFilho > scorePai1 )//verifica pai 1
                {
                    cout<<"Individuo "<< j<<" subistitui Pai1 "<<"\nGeração "<< i+1<<"\n\n"<<endl;

                    // faz a cópia dos genes do filho para o pai
                    for(int k = 0; k < tam_genes; k++)
                        populacao[indice_pai1][k] = filho[k];
                }
                else
                {
                    if(scoreFilho > scorePai2)//verifica pai 2
                    {
                        cout<<"Individuo "<< j<<" subistitui Pai2 "<<"\nGeração "<< i+1<<"\n\n"<<endl;

                        // faz a cópia dos genes do filho para o pai
                        for(int k = 0; k < tam_genes; k++)
                            populacao[indice_pai2][k] = filho[k];
                    }
                    else
                        cout<<"Individuo "<< j<<" fraco "<<"\nGeração "<< i+1<<"\n\n"<<endl;//vai mostra cada individuo e sua geração


                }

            }

        }

        cout << "Geracao " << i + 1 << endl;
        cout << "Melhor: ";

        int indice_melhor = obterMelhor();
        int score_melhor = obterPontuacao(populacao[indice_melhor]);

        for(int j = 0; j < tam_genes; j++)
            cout << populacao[indice_melhor][j] << " ";

        cout << "\nPontuacao: " << score_melhor << "\n\n";

        // verifica se encontrou o indivíduo considerado perfeito
        if(score_melhor == tam_genes)
              break;
    }

    return 0;
}


void inicializaPopulacao()
{
    for(int i = 0; i < tam_pop; i++)
    {
        vector<int> individuo;

        for(int j = 0; j < tam_genes; j++)
        {
            int num = rand() % 2; // escolhe um número no intervalo [0,1]
            individuo.push_back(num); // insere no vetor do individuo
        }

        populacao.push_back(individuo); // insere no vetor da populacao
    }
}

void mostrarPopulacao()
{
    for(int i = 0; i < tam_pop; i++)
    {
        for(int j = 0; j < tam_genes; j++)
            cout << populacao[i][j] << " ";
        cout << endl;
    }
}

// retorna o score do indivíduo
int obterPontuacao(vector<int> individuo)
{
    // o score é a soma dos valores dos genes
    int soma = 0;

    for(int i = 0; i < tam_genes; i++)
        soma += individuo[i];
    return soma;
}

// realiza a mutação
void mutacao(vector<int>& individuo)
{
    // escolhe um gene aleatoriamente no intervalo [0, tam_genes - 1]
    int gene = rand() % tam_genes;

    // modifica o valor do gene escolhido
    if(individuo[gene] == 0)
        individuo[gene] = 1;
    else
        individuo[gene] = 0;
}

// realiza o cruzamento
void cruzamento(int indice_pai1, int indice_pai2, vector<int>& filho)
{
    // escolhe um ponto aleatoriamente no intervalo [0, tam_genes - 1]
    int ponto = rand() % tam_genes;

    for(int i = 0; i <= ponto; i++)
        filho.push_back(populacao[indice_pai1][i]);
    for(int i = ponto + 1; i < tam_genes; i++)
        filho.push_back(populacao[indice_pai2][i]);
}

// retorna o índice do melhor indivíduo da população
int obterMelhor()
{
    int indice_melhor = 0;
    int score_melhor = obterPontuacao(populacao[0]);

    for(int i = 1; i < tam_pop; i++)
    {
        int score = obterPontuacao(populacao[i]);
        if(score > score_melhor)
        {
            indice_melhor = i;
            score_melhor = score;
        }
    }

    return indice_melhor;
}
